/* You can add global styles to this file, and also import other style files */
html, body {
  height: 100%;
  margin: 0;
}

html, body { height: 100%; }
body { margin: 0; font-family: Roboto, "Helvetica Neue", sans-serif; }

.flex-space-filler-1 {
  /* This fills the remaining space, by using flexbox.
     Every toolbar row uses a flexbox row layout. */
  flex: 1 1 auto;
}

// Angular Material prebuild themes:
// [./node_modules/@angular/material/prebuilt-themes]
// deeppurple-amber.css
// indigo-pink.css
// pink-bluegrey.css
// purple-green.css
@import '@angular/material/prebuilt-themes/deeppurple-amber.css';
@import '~@angular/material/theming';

// Include the common styles for Angular Material.
// **Be sure that you only ever include this mixin once!**
@include mat-core();

$disabled-text: #b0bec5;
$disabled-back: #eeeeee;

.disabled-color {
  color: $disabled-text;
}

button.mat-list-item-disabled {
  &:focus {
    background: $disabled-back;
  }
  color: $disabled-text;
}

/*
// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue. Available color palettes: https://material.io/design/color/
$candy-app-primary: mat-palette($mat-indigo);
$candy-app-accent:  mat-palette($mat-pink, A200, A100, A400);

// The warn palette is optional (defaults to red).
$candy-app-warn:    mat-palette($mat-red);

// Create the theme object (a Sass map containing all of the palettes).
$candy-app-theme: mat-light-theme($candy-app-primary, $candy-app-accent, $candy-app-warn);

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
@include angular-material-theme($candy-app-theme);
*/

// $mat-blue-grey
// $mat-lime
// $mat-amber

// Define an alternate dark theme.
$dark-primary: mat-palette($mat-teal);
$dark-accent:  mat-palette($mat-lime);
$dark-warn:    mat-palette($mat-pink);
$dark-theme:   mat-dark-theme($dark-primary, $dark-accent, $dark-warn);

// Include the alternative theme styles inside of a block with a CSS class. You can make this
// CSS class whatever you want. In this example, any component inside of an element with
// `.unicorn-dark-theme` will be affected by this alternate dark theme instead of the default theme.
.app-dark-theme {
  @include angular-material-theme($dark-theme);

  $disabled-text-dark: #595959;
  $disabled-back-dark: #080808;

  .disabled-color {
    color: $disabled-text-dark !important;
  }

  button.mat-list-item-disabled {
    &:focus {
      background: $disabled-back-dark !important;
    }
    color: $disabled-text-dark !important;
  }
}
